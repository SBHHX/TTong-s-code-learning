-- 视图

/*介绍
触发器是与表有关的数据库对象，指在 insert/update/delete 之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特
性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作
使用别名 OLD 和 NEW 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句
级触发。*/

    -- 行级触发器：一条sql语句影响5行，出发5次
    -- 语句级触发器：一条语句影响5行，触发一次

/*触发器类型                         NEW 和 OLD
INSERT 型触发器               NEW 表示将要或者已经新增的数据
UPDATE 型触发器               OLD 表示修改之前的数据，NEW 表示将要或已经修改后的数据
DELETE型触发器                OLD 表示将要或者已经删除的数据*/


/*这是关于数据库中触发器操作的语法介绍，以下为整理内容：

### 1. 触发器概述
触发器是数据库中的一种特殊存储过程，它会在指定的表上发生特定事件（如插入、更新、删除）时自动执行。

### 2. 语法
- **创建**
使用 `CREATE TRIGGER` 语句，具体格式为：
```sql
CREATE TRIGGER trigger_name
BEFORE/AFTER  INSERT/UPDATE/DELETE
ON tbl_name FOR EACH ROW -- 行级触发器
BEGIN
    trigger_stmt;
END;
```
其中，`trigger_name` 是触发器名称；`BEFORE/AFTER` 表示触发时机在事件之前或之后；`INSERT/UPDATE/DELETE` 是触发事件；`tbl_name` 是关联的表名；`trigger_stmt` 是触发器执行的具体语句。
 - **查看**
通过 `SHOW TRIGGERS;` 语句可以查看当前数据库中的所有触发器。
 - **删除**
使用 `DROP TRIGGER` 语句删除触发器，格式为：
```sql
DROP TRIGGER [schema_name.]trigger_name;
```
若省略 `schema_name`，则默认从当前数据库中删除指定名称的触发器。*/




/*这是一个数据库操作任务，要求定义触发器来记录 `tb_user` 表的数据变更日志，并插入到 `user_logs` 日志表中，涉及插入、更新和删除操作。以下是整理内容：

### 1. 需求描述
创建触发器，对 `tb_user` 表执行增加、修改、删除操作时，将相关变更日志记录到 `user_logs` 表中。

### 2. 日志表 `user_logs` 结构
使用如下 SQL 语句创建 `user_logs` 表：
```sql
create table user_logs(
    id int(11) not null auto_increment,
    operation varchar(20) not null comment '操作类型, insert/update/delete',
    operate_time datetime not null comment '操作时间',
    operate_id int(11) not null comment '操作的ID',
    operate_params varchar(500) comment '操作参数',
    primary key(`id`)
)engine=innodb default charset=utf8;
```
其中各字段含义为：
- `id`：自增主键，用于唯一标识日志记录。
- `operation`：记录操作类型，取值为 `insert`、`update` 或 `delete`。
- `operate_time`：记录操作发生的时间。
- `operate_id`：关联 `tb_user` 表中被操作数据的ID。
- `operate_params`：记录操作的相关参数 （可为空）。 */





-- 创建user_logs表用于存储操作日志
CREATE TABLE user_logs (
    id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    operation VARCHAR(20) NOT NULL COMMENT '操作类型, insert/update/delete',
    operate_time DATETIME NOT NULL COMMENT '操作时间',
    operate_id INT(11) NOT NULL COMMENT '操作的ID',
    operate_params VARCHAR(500) COMMENT '操作参数'
);


-- 将SQL语句的结束符临时修改为//，因为触发器内部是一个复合语句块，
-- 包含多条SQL语句，默认的结束符;在复合语句块内会导致语句提前结束，
-- 从而使触发器创建失败。修改结束符后，直到遇到下一个//，才认为语句结束
delimiter //

-- 创建一个名为log_insert_tb_user的触发器
-- 这里的CREATE TRIGGER是创建触发器的关键字
create trigger log_insert_tb_user

-- 指定该触发器在tb_user表执行INSERT操作之后触发
-- AFTER表示在触发事件之后执行触发器，INSERT是触发事件
after insert

-- 指明触发器监控的表是tb_user，FOR EACH ROW表示针对每一行受影响的数据执行触发器逻辑
on tb_user for each row

begin
    -- 向user_logs表中插入一条记录，记录tb_user表插入操作的相关日志信息
    insert into user_logs (id, operation, operate_time, operate_id, operate_params)
    -- VALUES子句用于指定要插入的具体值
    VALUES (
        -- id字段设置为null，假设id在user_logs表中是自增主键，理论上不用手动赋值，不过这里写法不规范，最好省略该字段
        null,
        -- 操作类型为'insert'，表示这是一次插入操作
        'insert',
        -- 操作时间为当前时间，now()函数获取数据库服务器当前的日期和时间
        now(),
        -- 操作的ID，取tb_user表新插入行的id值，new是MySQL中在触发器里表示新数据的关键字
        new.id,
        -- 拼接插入数据的详细信息，这里假设tb_user表有name、phone、email、profession等字段
        -- concat函数用于连接多个字符串，形成一条完整的操作参数描述信息
        concat('插入的数据内容为： ','id=',new.id,'   name=',new.name,'  phone=',new.phone,'  email=',new.email,'  profession=',new.profession)
    );
end //

-- 将SQL语句的结束符恢复为默认的;，以便后续正常使用分号作为语句结束标识
delimiter ;


-- 查看
show triggers ;
-- 删除
drop trigger  log_insert_tb_user;
-- 插入数据到tb_user
INSERT INTO tb_user(id, name, phone, email, profession, age, gender, status, createtime)
VALUES (25, '二皇子', '18809091212', 'erhuangzi@163.com', '软件工程', 23, '1', '1', NOW());



delimiter //

create trigger log_update_tb_user
    after update
    on tb_user for each row
    begin
        insert into user_logs (id, operation, operate_time, operate_id, operate_params)
            VALUES(null,'update',now(),new.id,
                   concat('更新前的数据为：','  id=',old.id,'  name=',old.name,'  phone=',old.phone,'  email=',old.email,'  profession=',old.profession,
                                        '更新后的数据为：','  id=',new.id,'  name=',new.name,'  phone=',new.phone,'  email=',new.email,'  profession=',new.profession)
                  );
    end //
delimiter ;

-- 查看
show triggers ;
-- 删除
drop trigger  log_update_tb_user;

update tb_user set age = 32 where id = 23;




delimiter //

create trigger log_delete_tb_user
    before delete
    on tb_user for each row
    begin
        insert into user_logs (id, operation, operate_time, operate_id, operate_params)
            VALUES(null,'delete',now(),old.id,
                   concat('删除前的数据为：','  id=',old.id,'  name=',old.name,'  phone=',old.phone,'  email=',old.email,'  profession=',old.profession));
    end //
delimiter ;

-- 查看
show triggers ;
-- 删除
drop trigger  log_delete_tb_user;

delete from tb_user where id = 25;


/*这是关于数据库中视图、存储过程、存储函数和触发器的介绍，以下是整理内容：
1. **视图（VIEW）**
    - 本质是虚拟表，不存储查询结果，仅保存查询的SQL逻辑。
    - 特点是使用简单、能增强数据安全性、实现数据独立 。
2. **存储过程（PROCEDURE）**
    - 是预先定义并存储在数据库中的一组SQL语句集合。
    - 优点包括减少网络交互、提升性能，支持封装和重用。
    - 可使用变量、if、case等语句，支持多种类型的参数（in/out/inout），还有循环结构（while、repeat、loop）、游标（cursor）和异常处理（handler） 。
3. **存储函数（FUNCTION）**
    - 属于有返回值的存储过程，但其参数类型只能是IN类型。
    - 功能上可被存储过程替代。
4. **触发器（TRIGGER）**
    - 能在表数据进行INSERT、UPDATE、DELETE操作之前或之后触发执行。
    - 主要用于保证数据完整性、记录操作日志、进行数据校验等。 */
