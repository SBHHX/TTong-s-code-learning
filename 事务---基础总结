/*事务简介
事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作
请求，即这些操作要么同时成功，要么同时失败，*/
/*默认MySQL的事务是自动提交的，
也就是说，当执行一条DML语句，MySQL会立即隐式的提交事务:*/


-- -------------------------- 事务操作 --------------------------
-- 数据准备部分
-- 创建名为account的表，用于存储账户信息
create table account(
    -- id字段，设置为自增整数类型，作为表的主键，用于唯一标识每条记录，注释说明是主键ID
    id int auto_increment primary key comment '主键ID',
    -- name字段，设置为最多存储10个字符的可变长度字符串类型，注释说明用于存储姓名
    name varchar(10) comment '姓名',
    -- money字段，设置为整数类型，注释说明用于存储余额
    money int comment '余额'
) comment '账户表';

-- 向account表中插入两条初始数据记录
-- 这里id设为null是因为它是自增字段，数据库会自动生成，插入张三和李四的初始余额均为2000
insert into account(id, name, money) VALUES (null,'张三',2000),(null,'李四',2000);

-- 恢复数据部分，将张三和李四的余额重新设置为2000
-- 这部分通常在数据出现错误需要恢复初始状态时使用
update account set money = 2000 where name = '张三' or name = '李四';


select @@autocommit;
set  @@autocommit = 1;  -- 设置为手动提交

-- 转账操作(张三给李四转账1000)
-- 1.查询张三账户余额
select name,money from account where name = '张三';
-- 2.将张三账户余额-1000
update account set money = money - 1000 where name = '张三';

SIGNAL SQLSTATE '错误代码' SET MESSAGE_TEXT = '错误提示信息';  -- singal用于抛出异常是事务中断
-- 3，将李四账户余额+1000
update account set money = money + 1000 where name = '李四';

-- 提交事务
commit;

-- 回滚事务
rollback ;

-- 方式2

/*事务操作
开启事务
START TRANSACTION 或 BEGIN;
提交事务
COMMIT
回滚事务
ROLLBACK
  */

start transaction;

-- 转账操作(张三给李四转账1000)
-- 1.查询张三账户余额
select name,money from account where name = '张三';
-- 2.将张三账户余额-1000
update account set money = money - 1000 where name = '张三';

SIGNAL SQLSTATE '错误代码' SET MESSAGE_TEXT = '错误提示信息';
-- 3，将李四账户余额+1000
update account set money = money + 1000 where name = '李四';

-- 提交事务
commit ;

-- 回滚事务
rollback;

/*事务四大特性
原子性(Atomicity):事务是不可分割的最小操作单元，要么全部成功，要么全部失败。
一致性(Consistency):事务完成时，必须使所有的数据都保持一致状态。
隔离性(lsolation):数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。
持久性(Durability):事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。
*/


/*并发事务问题
问题                                     描述
脏读                        一个事务读到另外一个事务还没有提交的数据。
不可重复读                   一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。
幻读                          一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了*/


/*事务隔离级别
隔离级别                                赃读                不可重复读                  幻读
Read uncommitted(读未提交)                √                    √                       √
Read committed(读已提交)                  ×                    √                       √
Repeatable Read(可重复读)(MySQL默认)       ×                    ×                       √
Serializable(串行化)                      ×                    ×                       ×
*/

-- 查看事务隔离级别
-- SELECT @@TRANSACTION_ISOLATION;
-- 设置事务隔离级别
-- SET [SESSION|GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}

update account set money = money - 1000 where name = '张三';

update account set money = money + 1000 where name = '张三';

select * from account;

select @@transaction_isolation;

start transaction;

-- 事务A  事务B
-- 一个事务完成，有两种方式：1.commit； 提交   2.rollback；回滚
-- 未提交：即一个事务未完成

set session transaction isolation level read uncommitted ;
-- 事务B未提交，A未提交 就能查询到B对数据的修改

set session transaction isolation level read committed ;
-- 事务B未提交，A无法查询到数据变化
-- 事务B提交，A未提交就能查询到变化

set session transaction isolation level repeatable read ;
-- 事务B未提交，A无法查询到数据变化
-- 事务B提交，A未提交也不能查询到变化
-- 事务B提交，A也提交才能查询到变化

-- 原因倒是很好解释，在可重复读级别下，A开启一个事务时，会生成一个快照，就像复制了一份数据，A事务读取数据时处于快照读，只读取复制的这一份数据，这一份不会受到来自其他事务的
-- 实时修改，而修改操作时处于当前读机制，会实时收到最新的数据影响，快照读有点类似于原神香菱大招锁面板，那玩意其实就是快照机制，而其它不锁面板的技能，就是当前读

/*
1.快照读（Snapshot Read）：
普通SELECT语句基于事务启动时的数据版本（快照），不会感知其他事务的提交操作。
2。当前读（Current Read）：
加锁的SELECT（如SELECT ... FOR UPDATE）或增删改操作会实时读取最新数据，并可能加锁。*/

set session transaction isolation level serializable ;
-- 谁先开始对对象的事务操作，谁就拥有优先修改操作权
-- 当事务A先开始，B在后时，如果A未提交或者回滚从而使事务完成，B无法进行修改，但是可以读取，当然读取也是读的快照，不会感知A的更新/删除操作
-- 当A完成后，B才可以修改

-- 事务隔离级别越高，安全性越高，但是性能越差
-- 级别这个东西没有好坏之分，而脏读，不可重复读，可重复读，幻读之间也没有好坏之分，看需要而定
-- 以幻读为例：
/*
1.幻读的正面影响
在某些场景下，幻读可能是有益的，因为它反映了数据的实时变化：

实时性要求高的场景：
例如，在监控系统或实时统计系统中，事务需要感知其他事务的最新操作，幻读可以帮助事务获取最新的数据状态。
业务逻辑允许的场景：
如果业务逻辑不依赖于事务内数据的绝对一致性，幻读不会对业务造成负面影响。

2。幻读的负面影响
在大多数场景下，幻读会带来逻辑矛盾和数据一致性问题：

逻辑冲突：
事务A在查询时未发现某条数据，但在操作时（如插入或更新）可能因该数据的存在而失败（如主键冲突）。
业务风险：
例如，在库存管理系统中，事务A查询库存为空后尝试插入新库存记录，但事务B已插入相同记录，导致事务A的操作失败。
数据一致性：
幻读破坏了事务内数据的一致性，使得事务无法基于稳定的数据状态进行逻辑判断。   */


-- 补充：             --来自问小白
/*幻读的定义与总结
幻读（Phantom Read） 是指在同一事务中，多次执行相同范围的查询操作时，由于其他事务的插入或删除操作，导致前后两次查询的结果集行数不一致的现象。具体表现为：
1. 数据“凭空出现”：事务A第一次查询时未发现某条数据，但事务B插入新数据后，事务A再次查询时发现该数据“凭空出现”。
2. 数据“消失”：事务A第一次查询时发现某条数据存在，但事务B删除该数据后，事务A再次查询时发现该数据“消失”。
幻读的核心特征
1. 范围查询：幻读通常发生在范围查询（如WHERE id > 10）中，而不是针对单条数据的查询。
2. 结果集行数变化：前后两次查询的结果集行数不一致（新增或减少）。
3. 触发操作：其他事务的插入或删除操作。
幻读的典型场景
• 场景1：
事务A查询id > 10的数据，结果为空 → 事务B插入id=11的数据并提交 → 事务A再次查询id > 10的数据，发现id=11的记录“凭空出现”。
• 场景2：
事务A查询id > 10的数据，发现id=11的记录存在 → 事务B删除id=11的数据并提交 → 事务A再次查询id > 10的数据，发现id=11的记录“消失”。*/


-- 事务总结
/*
1.事务简介
事务是一组操作的集合，这组操作，要么全部执行成功，要么全部执行失败。
2.事务操作
START TRANSACTION;--开启事务
COMMIT/ROLLBACK;--提交/回滚事务
3.事务四大特性
原子性( Atomicity)、一致性( Consistency)、
隔离性( Isolation)、持久性( Durability)
4.并发事务问题
赃读、不可重复读、幻读
事务隔离级别
READ UNCOMMITTED 、READ COMMITTED、 REPEATABLE READ、 SERIALIZABLE
*/
