/*多表关系
概述
项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所
以各个表结构之间也存在着各种联系，基本上分为三种:
> 一对多(多对一)
> 多对多
> 一对一

一对多(多对一)
案例: 部门 与 员工的关系
关系:一个部门对应多个员工，一个员工对应一个部门
实现:在多的一方建立外键，指向一的一方的主键

多对多
案例: 学生 与 课程的关系
关系:一个学生可以选修多门课程，一门课程也可以供多个学生选择
实现:建立第三张中间表，中间表至少包含两个外键，分别关联两方主键*/

-- 创建student表，用于存储学生信息
create table student
(
    -- id字段，设置为自增整数类型，作为主键，注释为'主键ID'
    id int auto_increment primary key comment '主键ID',
    -- name字段，可变字符类型，长度为10，用于存储姓名，注释为'姓名'
    name varchar(10) comment '姓名',
    -- no字段，可变字符类型，长度为10，用于存储学号，注释为'学号'
    no varchar(10) comment '学号'
) comment '学生表';

-- 向student表中插入学生数据，id字段因为设置了自增，插入时可设为null
insert into student values (null, '黛绮丝', '2000100101'),
                           (null, '谢逊', '2000100102'),
                           (null, '殷天正', '2000100103'),
                           (null, '韦一笑', '2000100104');

-- 创建course表，用于存储课程信息
create table course
(
    -- id字段，设置为自增整数类型，作为主键，注释为'主键ID'
    id int auto_increment primary key comment '主键ID',
    -- name字段，可变字符类型，长度为10，用于存储课程名称，注释为'课程名称'
    name varchar(10) comment '课程名称'
) comment '课程表';

-- 向course表中插入课程数据，id字段因为设置了自增，插入时可设为null
insert into course values (null, 'Java'), (null, 'PHP'), (null, 'MySQL'), (null, 'Hadoop');

-- 创建student_course表，该表作为学生和课程的中间表，用于建立学生和课程之间的多对多关系
create table student_course
(
    -- id字段，设置为自增整数类型，作为该表的主键，注释为'主键'
    id int auto_increment primary key comment '主键',
    -- studentid字段，整数类型，不允许为null，用于存储学生的ID，注释为'学生ID'
    student_id int not null comment '学生ID',
    -- courseid字段，整数类型，不允许为null，用于存储课程的ID，注释为'课程ID'
    course_id int not null comment '课程ID',
    -- 定义外键约束fk_courseid，将当前表的courseid字段与course表的id字段关联
    constraint fk_course_id foreign key (course_id) references course (id),
    -- 定义外键约束fk_studentid，将当前表的studentid字段与student表的id字段关联
    constraint fk_student_id foreign key (student_id) references student (id)
) comment '学生-课程表';

-- 向student_course表中插入数据，建立学生和课程之间的关联关系，
-- id字段因为设置了自增，插入时设为null，后面的数字分别对应学生ID和课程ID
insert into student_course values (null,1,1),
                                  (null,1,2),
                                  (null,1,3),
                                  (null,2,2),
                                  (null,2,3),
                                  (null,3,4);

alter table student_course comment '学生课程中间表';

/*一对一
案例: 用户 与 用户详情的关系
关系: 一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率
实现:在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)*/


create table tb_user(
    -- id字段，设置为自增整数类型，作为主键，注释为'主键ID'
    id int auto_increment primary key comment '主键ID',
    -- name字段，可变字符类型，长度为10，用于存储姓名，注释为'姓名'
    name varchar(10) comment '姓名',
    -- age字段，整数类型，用于存储年龄，注释为'年龄'
    age int comment '年龄',
    -- gender字段，字符类型，长度为1，用于存储性别，注释说明取值含义
    gender char(1) comment '1: 男 ，2: 女',
    -- phone字段，字符类型，长度为11，用于存储手机号，注释为'手机号'
    phone char(11) comment '手机号'
) comment '用户基本信息表';

create table tb_user_edu(
    -- id字段，设置为自增整数类型，作为主键，注释为'主键ID'
    id int auto_increment primary key comment '主键ID',
    -- degree字段，可变字符类型，长度为20，用于存储学历，注释为'学历'
    degree varchar(20) comment '学历',
    -- major字段，可变字符类型，长度为50，用于存储专业，注释为'专业'
    major varchar(50) comment '专业',
    -- primaryschool字段，可变字符类型，长度为50，用于存储小学信息，注释为'小学'
    primaryschool varchar(50) comment '小学',
    -- middleschool字段，可变字符类型，长度为50，用于存储中学信息，注释为'中学'
    middleschool varchar(50) comment '中学',
    -- university字段，可变字符类型，长度为50，用于存储大学信息，注释为'大学'
    university varchar(50) comment '大学',
    -- userid字段，整数类型，设置为唯一，用于关联用户基本信息表，注释为'用户ID'
    userid int unique comment '用户ID',
    -- 定义外键约束fk_userid，将当前表的userid字段与tb_user表的id字段关联
    constraint fk_userid foreign key (userid) references tb_user(id)
) comment '用户教育信息表';

-- 向tb_user表中插入用户的基本信息
insert into tb_user(id, name, age, gender, phone) values
-- 插入黄渤的信息，id设为null会自动递增，性别'1'表示男
(null,'黄渤',45,'1','18800001111'),
-- 插入名为冰冰的用户信息，性别'2'表示女
(null,'冰冰',35,'2','18800002222'),
-- 插入码云的用户信息，性别'1'表示男
(null,'码云',55,'1','18800008888'),
-- 插入李彦宏的用户信息，性别'1'表示男
(null,'李彦宏',50,'1','18800009999');

-- 向tb_user_edu表中插入用户的教育信息，与tb_user表通过userid关联
insert into tb_user_edu(id, degree, major, primaryschool, middleschool, university, userid) values
-- 插入userid为1（对应tb_user表中第一条记录）的用户教育信息，学历本科，专业舞蹈
(null,'本科','舞蹈','静安区第一小学','静安区第一中学','北京舞蹈学院',1),
-- 插入userid为2（对应tb_user表中第二条记录）的用户教育信息，学历硕士，专业表演
(null,'硕士','表演','朝阳区第一小学','朝阳区第一中学','北京电影学院',2),
-- 插入userid为3（对应tb_user表中第三条记录）的用户教育信息，学历本科，专业英语
(null,'本科','英语','杭州市第一小学','杭州市第一中学','杭州师范大学',3),
-- 插入userid为4（对应tb_user表中第四条记录）的用户教育信息，学历本科，专业应用数学
(null,'本科','应用数学','阳泉第一小学','阳泉区第一中学','清华大学',4);


-- 创建名为dept的表，用于存储部门相关信息，整体注释说明该表是部门表
CREATE TABLE dept (
    -- id字段，设置为整数类型，作为主键唯一标识每个部门，注释描述其为部门ID
    id INT PRIMARY KEY COMMENT '部门ID',
    -- name字段，设置为可变字符类型，长度为50，用于存储部门名称，注释对其含义进行说明
    name VARCHAR(50) COMMENT '部门名称'
) COMMENT '部门表';

-- 向dept表中插入数据，建立具体的部门记录
-- 每一组括号内对应一条记录，分别为部门ID和部门名称
INSERT INTO dept (id, name) VALUES
(1, '研发部'),
(2, '市场部'),
(3, '财务部'),
(4, '销售部'),
(5, '总经办'),
(6, '人事部');

-- 创建名为emp的表，用于存储员工信息
CREATE TABLE emp (
    -- id字段，设置为整数类型，作为主键，唯一标识每个员工，注释为员工ID
    id INT PRIMARY KEY COMMENT '员工ID',
    -- name字段，设置为可变字符类型，用于存储员工姓名
    name VARCHAR(50) COMMENT '员工姓名',
    -- age字段，设置为整数类型，用于存储员工年龄
    age INT COMMENT '员工年龄',
    -- job字段，设置为可变字符类型，用于存储员工职位
    job VARCHAR(50) COMMENT '员工职位',
    -- salary字段，设置为数值类型，用于存储员工薪资
    salary DECIMAL(10, 2) COMMENT '员工薪资',
    -- entrydate字段，设置为日期类型，用于存储员工入职日期
    entrydate DATE COMMENT '入职日期',
    -- managerid字段，设置为整数类型，用于存储员工上级领导的ID，可为空
    managerid INT COMMENT '上级领导ID',
    -- dept_id字段，设置为整数类型，用于存储员工所属部门的ID
    dept_id INT COMMENT '部门ID'
) COMMENT '员工表';

-- 向emp表中插入员工数据
INSERT INTO emp (id, name, age, job, salary, entrydate, managerid, dept_id) VALUES
(1, '金庸', 66, '总裁', 20000.00, '2000-01-01', NULL, 5),
(2, '张无忌', 20, '项目经理', 12500.00, '2005-12-05', 1, 1),
(3, '杨逍', 33, '开发', 8400.00, '2000-11-03', 2, 1),
(4, '韦一笑', 48, '开发', 11000.00, '2002-02-05', 2, 1),
(5, '常遇春', 43, '开发', 10500.00, '2004-09-07', 3, 1),
(6, '小昭', 19, '程序员鼓励师', 6600.00, '2004-10-12', 2, 1),
(7, '灭绝', 60, '财务总监', 8500.00, '2002-09-12', 1, 3),
(8, '周芷若', 19, '会计', 48000.00, '2006-06-02', 7, 3),
(9, '丁敏君', 23, '出纳', 5250.00, '2009-05-13', 7, 3),
(10, '赵敏', 20, '市场部总监', 12500.00, '2004-10-12', 1, 2),
(11, '鹿杖客', 56, '职员', 3750.00, '2006-10-03', 10, 2),
(12, '鹤笔翁', 19, '职员', 3750.00, '2007-05-09', 10, 2),
(13, '方东白', 19, '职员', 5500.00, '2009-02-12', 10, 2),
(14, '张三丰', 88, '销售总监', 14000.00, '2004-10-12', 1, 4),
(15, '俞莲舟', 38, '销售', 4600.00, '2004-10-12', 14, 4),
(16, '宋远桥', 40, '销售', 4600.00, '2004-10-12', 14, 4),
(17, '陈友谅', 42, NULL, 2000.00, '2011-10-12', 1, NULL);

-- 多表查询 -- 笛卡尔积
select * from emp,dept where emp.dept_id = dept.id;

/*连接查询-内连接
内连接查询语法:

隐式内连接
SELECT 字段列表 FROM 表1,表2 WHERE 条件 ..

显式内连接
SELECT 字段列表 FROM 表1[INNER]JOIN 表2 ON 连接条件

内连接查询的是两张表交集的部分*/

-- 内连接演示
-- 1.查询每一个员工的姓名，及关联的部门的名称(隐式内连接实现)
-- 表结构:emp，dept
select emp.name,dept.name from emp,dept where emp.dept_id = dept.id;

-- 2.查询每一个员工的姓名，及关联的部门的名称(显式内连接实现)
select emp.name ,dept.name from emp inner join dept on emp.dept_id = dept.id;


/*外连接查询语法
左外连接
SELECT 字段列表 FROM 表1 LEFT[OUTER]JOIN 表2 ON 条件
相当于查询表1(左表)的所有数据 包含 表1和表2交集部分的数据
右外连接
SELECT 字段列表 FROM 表1 RIGHT[OUTER]JOIN 表2 ON 条件

相当于查询表2(右表)的所有数据 包含 表1和表2交集部分的数据*/

-- 外连接演示
-- 1.查询emp表的所有数据和对应的部门信息(左外连接)
select * from emp left outer join dept on emp.dept_id = dept.id;
-- 2.查询dept表的所有数据，和对应的员工信息(右外连接)
select * from dept right outer join emp on emp.dept_id = dept.id ;


/*自连接查询语法:
SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 …;
自连接查询，可以是内连接查询，也可以是外连接查询*/

-- 自连接
-- 1.查询员工及其所属领导的名字
-- 看作两张表分别命名
select employee.name , manager.name from emp as employee , emp as manager where manager.managerid = employee.managerid;
select employee.name,manager.name from emp employee join emp manager on employee.name = manager.name;
-- 2.查询所有员工 emp 及其领导的名字 emp ，如果员工没有领导，也需要查询出来
select employee.name '员工', manager.name '领导' from emp employee left join emp manager on employee.managerid = manager.id;


/*联合查询-union,union all
对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。
SELECT 字段列表 FROM 表A ….
UNION [ ALL ]
SELECT 字段列表 FROM 表B .*/

-- 将薪资低于 5000 的员工，和年龄大于 50 岁的员工全部查询出来。
select * from emp where salary < 5000
union
select * from emp where age > 50 ;

/*对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致
union al 会将全部的数据直接合并在一起，union 会对合并之后的数据去重*/


/*子查询
概念:SOL语句中嵌套SELECT语句，称为嵌套查询，又称子查询
SELECT *FROM t1 WHERE column1=(SELECT column1 FROM t2 );
子查询外部的语句可以是INSERT/UPDATE/DELETE/SELECT的任何一个
根据子查询结果不同，分为:
标量子查询(子查询结果为单个值)
列子查询(子查询结果为一列)
行子查询(子查询结果为一行)
表子查询(子查询结果为多行多列)
根据子查询位置，分为:WHERE之后、FROM之后、SELECT之后。*/

/*标量子查询
子查询返回的结果是单个值(数字、字符串、日期等)，最简单的形式，这种子查询成为标量子查询
常用的操作符:=<>>*/

-- 1.查询“销售部”的所有员工信息
-- a.查谢“销售部”部门ID
select id from dept where name = '销售部';
-- b.根据销售部部门ID，查询员工信息
select * from emp where dept_id = (select id from dept where name = '销售部');

-- 2.查询在“方东白”入职之后的员工信息
select name ,entrydate from emp where name = '方东白';

select name,entrydate from emp where entrydate > (select entrydate from emp where name = '方东白');

/*列子查询
子查询返回的结果是一列(可以是多行)，这种子查询称为列子查询
常用的操作符:IN、NOTIN、ANY、SOME、ALL
操作符                                                        描述
IN                                                 在指定的集合范围之内，多选一
NOT IN                                              不在指定的集合范围之内
ANY                                            子查询返回列表中，有任意一个满足即可
SQME                                         与ANY等同，使用SOME的地方都可以使用ANY
ALL                                              子查询返回列表的所有值都必须满足*/

-- 列子查询
-- 1.查询“销售部”和“市场部”的所有员工信息
select id,name from dept where name = '销售部' or name = '市场部';

select * from emp where dept_id in (select id from dept where name = '销售部' or name = '市场部');

-- 2.查询比财务部所有人工资都高的员工信息
select id from dept where name = '销售部';

select salary from emp where dept_id = (select id from dept where name = '销售部');
-- 两种思路
-- 1.查询比销售部最高工资还要高的员工
select * from emp where salary > (select max(salary) from emp where dept_id = (select id from dept where name = '销售部'));
-- 2.查询比销售部所有员工工资都高的员工
select * from emp where salary > all (select salary from emp where dept_id = (select id from dept where name = '销售部'));

-- 3.查询比研发部其中任意一人工资高的员工信息
select id from dept where name = '研发部';

select salary from emp where dept_id = (select id from dept where name = '研发部');
-- 1.查询比销售部最低工资高就行了
select * from emp where salary > (select min(salary) from emp where dept_id = (select id from dept where name = '研发部'));
-- 2.any表示比任意一个高就满足查询条件
select * from emp where salary > any (select salary from emp where dept_id = (select id from dept where name = '研发部'));


/*行子查询
子查询返回的结果是一行(可以是多列)，这种子查询称为行子查询
常用的操作符:=、<>、IN、NOT IN
*/

-- 行子查询
-- 1.查询与“张无忌”的薪资及直属领导相同的员工信息;
-- a.查询“张无忌”的薪资及直属领导
select salary,managerid from emp where name ='张无忌';
-- b.查询与“张无忌”的薪资及直属领导相同的员工信息;
select * from emp where (salary,managerid) = (select salary,managerid from emp where name ='张无忌') and name != '张无忌' ;


/*表子查询
子查询返回的结果是多行多列，这种子查询称为表子查询
常用的操作符:IN*/

-- 表子查询
-- 1.查询与“鹿杖客”，“宋远桥”的职位和薪资相同的员工信息
select job,salary from emp where name in ('鹿杖客','宋远桥');
-- 不标准的写法
select * from emp where (job,salary) = any (select job,salary from emp where name in ('鹿杖客','宋远桥'));
-- 标准写法
select * from emp where (job, salary) in (select job, salary from emp where name in ('鹿杖客','宋远桥'));

-- 2.查询入职日期是“2006-01-01”之后的员工信息，及其部门信息
select * from emp where entrydate > '2006-01-01';

select dept_id from emp where entrydate in (select entrydate from emp where entrydate > '2006-01-01');

select * from dept where id in (select dept_id from emp where entrydate in (select entrydate from emp where entrydate > '2006-01-01'));
-- 上面是错误写法，不能一起显示员工信息和部门信息
-- 要用外连接查询，将员工表的信息和两个表的连接的信息一起查询展示
select e.*,d.* from (select * from emp where entrydate > '2006-01-01') as e join dept as d on e.dept_id = d.id;
-- 左表用已经查询过入职日期的表嵌套,否则会少一个过滤条件

-- 创建一个名为 salgrade 的表，用于存储薪资等级相关信息
-- comment 关键字用于为表添加注释，方便后续维护和理解该表的用途
CREATE TABLE salgrade (
    -- grade 列，数据类型为整数，用于表示薪资等级
    grade INT,
    -- losal 列，数据类型为整数，用于存储该薪资等级对应的最低薪资
    losal INT,
    -- hisal 列，数据类型为整数，用于存储该薪资等级对应的最高薪资
    hisal INT
) COMMENT '薪资等级表';

-- 向 salgrade 表中插入一条记录，表示薪资等级为 1 的信息
-- 该等级的最低薪资为 0，最高薪资为 3000
INSERT INTO salgrade VALUES (1, 0, 3000);
-- 插入薪资等级为 2 的记录，最低薪资为 3001，最高薪资为 5000
INSERT INTO salgrade VALUES (2, 3001, 5000);
-- 插入薪资等级为 3 的记录，最低薪资为 5001，最高薪资为 8000
INSERT INTO salgrade VALUES (3, 5001, 8000);
-- 插入薪资等级为 4 的记录，最低薪资为 8001，最高薪资为 10000
INSERT INTO salgrade VALUES (4, 8001, 10000);
-- 插入薪资等级为 5 的记录，最低薪资为 10001，最高薪资为 15000
INSERT INTO salgrade VALUES (5, 10001, 15000);
-- 插入薪资等级为 6 的记录，最低薪资为 15001，最高薪资为 20000
INSERT INTO salgrade VALUES (6, 15001, 20000);
-- 插入薪资等级为 7 的记录，最低薪资为 20001，最高薪资为 25000
INSERT INTO salgrade VALUES (7, 20001, 25000);
-- 插入薪资等级为 8 的记录，最低薪资为 25001，最高薪资为 30000
INSERT INTO salgrade VALUES (8, 25001, 30000);

-- 1.查询员工的姓名、年龄、职位、部门信息。
select e.name,e.age,e.job,d.name from emp as e join dept as d on d.id = e.dept_id ;
-- 2.查询年龄小于30岁的员工姓名、年龄、职位、部门信息。
select e.name,e.age,e.job,d.name from (select * from emp where age < 30) as e join dept as d on d.id = e.dept_id;
-- 3.查询拥有员工的部门ID、部门名称。
select e.name,d.id,d.name from emp as e join dept as d on d.id = e.dept_id;
-- 4.查询所有年龄大于40岁的员工,及其归属的部门名称; 如果员工没有分配部门,也需要展示出来
select e.name,d.name from (select * from emp where age >40) e left join dept d on e.dept_id = d.id;
-- 5.查询所有员工的工资等级。
select e.name , s.grade from emp e left join salgrade s on e.salary between s.losal and s.hisal;
-- 6.查询"研发部"所有员工的信息及工资等级。
select e.* ,s.grade from (select * from emp where dept_id in (select id from dept where name = '研发部')) e left join salgrade s on e.salary between s.losal and s.hisal;
-- 7.查询"研发部"员工的平均工资。
select avg(salary) as '平均工资' from emp where dept_id in (select id from dept where name = '研发部') ;
-- 8.查询工资比"灭绝"高的员工信息。
select * from emp where salary > (select salary from emp where name = '灭绝');
-- 9.查询比平均薪资高的员工信息
select * from emp where salary > (select avg(salary) from emp);
-- 10.查询低于本部门平均工资的员工信息。
-- 正确写法
SELECT * , (SELECT AVG(e1.salary) FROM emp e1 WHERE e1.dept_id = e2.dept_id) '部门平均薪资' FROM emp e2 WHERE e2.salary < (SELECT AVG(e1.salary) FROM emp e1 WHERE e1.dept_id = e2.dept_id);
-- outer.emp是正在查询的当前部门，括号中查询到是当前部门的平均薪资
-- 错误写法
/*子查询逻辑问题：子查询 (select avg(e.salary) from emp e join dept d on d.id = e.dept_id) 只是计算出了所有部门的整体平均薪资，
而不是每个部门各自的平均薪资。要得到每个部门各自的平均薪资，子查询中应该按照部门分组计算，目前的写法无法满足 “低于本部门平均工资” 的查询需求。*/
select * from emp where salary <(select avg(e.salary) from emp e join dept d on d.id = e.dept_id);

-- 11.查询所有的部门信息,并统计部门的员工人数。
select d.id,d.name, (select count(*) from emp e where e.dept_id = d.id )'部门人数' from dept d;

select count(*) from emp where dept_id = 1;
-- 12.查询所有学生的选课情况,展示出学生名称,学号,课程名称
-- 表：student,course,sudent_course
-- 连接条件:student.id = student_course.student_id , course_id = student_course.course_id
select s.name,s.no,c.name from student s,student_course sc,course c where s.id=sc.student_id and c.id = sc.course_id;
