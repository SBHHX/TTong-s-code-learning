/*存储过程
介绍
存储过程是事先经过编译并存储在数据库中的一段 SOL语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据
库和应用服务器之间的传输，对于提高数据处理的效率是有好处的
存储过程思想上很简单，就是数据库 SOL语言层面的代码封装与重用，*/

/*特点
封装，复用
可以接收参数，也可以返回数据
减少网络交互，效率提升*/


/*创建

CREATE PROCEDURE 存储过程名称([参数列表 ])
BEGIN
      SQL语句
END ;


调用
CALL 名称([参数 ]);*/

-- 创建
create procedure p1()
begin
    select count(*) from student;
end;

-- 调用
call p1();

-- 查看

-- SELECT* FROM INFORMATION SCHEMA.ROUTINES WHERE ROUTINE SCHEMA='xx';-- 查询指定数据库的存储过程及状态信息
-- SHOW CREATE PROCEDURE 存储过程名称;-- 査询某个存储过程的定义

select * from information_schema.ROUTINES where ROUTINE_SCHEMA = 'itcast';

show create procedure p1;

-- 删除

-- DROP PROCEDURE [IF EXISTS]存储过程名称

drop procedure if exists p1;

-- 注意: 在命令行中，执行创建存储过程的SQL时，需要通过关键字 delimiter 指定SQL语句的结束符
/*比如：
  delimiter $$
  就是将$$设置为结束符，代替了;
  用完之后再改回来就行
  */



-- 变量

-- 全局变量：在所有的会话中都生效，例如创建的多个查询控制台，就是多个绘画
-- 会话变量：当前会话中有效

/*变量
系统变量 是MySQL服务器提供，不是用户定义的，属于服务器层面。分为全局变量(GLOBAL)、会话变量(SESSION)

  查看系统变量
SHOW [ SESSION |GLOBAL] VARIABLES ; -- 查看所有系统变量
SHOW[SESSION|GLOBAL] VARIABLES LIKE'.;--可以通过LIKE模糊匹配方式查找变量
SELECT @@[SESSION|GLOBAL] 系统变量名, -- 查看指定变量的值
-- 如果不指定默认为session级别，会话变量
  设置系统变量
SET[SESSION|GLOBAL]系统变量名=值;
SET @@[SESSION|GLOBAL]系统变量名=值
  */

-- 查看系统变量
show variables ; -- 查所有的系统变量

show session variables like 'auto%';

show global variables like 'auto%';

select @@global.autocommit; -- 查看指定变量

select @@session.autocommit;

-- 设置系统变量

set session autocommit = 0;

set @@session.autocommit = 0; -- @@后面要带一个   .

/*自动提交不仅是事务，正常的增删改都不会自动提交，如果关闭的话*/

insert into course values (6,'ES');

commit ;

set session autocommit = 1;

-- 即使是设置的全局的，在服务器重启之后依旧会被恢复

/*注意
如果没有指定SESSION/GLOBAL，默认是SESSION（会话变量）。
mysqI服务重新启动之后，所设置的全局参数会失效，
要想不失效，可以在 /etc/my.cnf 中配置。*/




-- 用户自定义变量

/*变量
用户定义变量 是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用“@变量名”使用就可以。其作用域为当前
连接。

  赋值
SET @var name = expr [, @var_name = expr] ... ,
SET @var name := expr [, @var name := expr] ... .
SELECT @var name := expr [, @var name := expr] .. ;
SELECT 字段名 INTO @var_name FROM 表名;

   使用
SELECT @var_name ;
  */

-- 变量 用户变量

-- 赋值
set @myname = 'itcast';

set @myage = 10;

SET @num = 10, @str = 'hello';

SET @x := 5, @y := @x * 2; -- 推荐  用于区分比较运算符中的 =

select @mycolor = '中国红';

SELECT @total := count(name) FROM tb_user;

select count(*) into @mycount from tb_user;

SELECT name INTO @current_user FROM tb_user WHERE id = 1;

-- 使用

select @myname,@myage;

/*注意
用户定义的变量无需对其进行声明或初始化，只不过获取到的值为NULL。*/

set @myabc;  --  用set定义变量必须要赋初值

select @myABC;  -- 但是用select可以不赋初值

/*简单来说，SET 专注于单纯的赋值，所以要求必须有明确值；SELECT 基于查询功能来赋值，能根据查询结果灵活处理，因此允许不赋初值的情况 。*/



-- 局部变量

/*在MySQL的存储过程中，不能像操作全局变量和会话变量那样直接用`SET`声明并给局部变量赋值，原因如下：

### 局部变量的声明规则
存储过程中的局部变量必须使用`DECLARE`语句进行声明，这是强制要求。`DECLARE`语句需要在存储过程的`BEGIN...END`块内，且要在其他语句（如`SET`、`SELECT`等）之前使用。声明语法为`DECLARE 变量名 变量类型 [DEFAULT...]`， 例如：
```sql
DELIMITER //
CREATE PROCEDURE testProcedure()
BEGIN
    DECLARE localVar INT DEFAULT 0; -- 声明一个名为localVar的整型局部变量，初始值为0
END //
DELIMITER ;
```

### `SET`的作用
`SET`语句用于给已经声明过的变量赋值，无论是局部变量、全局变量还是会话变量。但对于局部变量，前提是已经用`DECLARE`声明好了。例如：
```sql
DELIMITER //
CREATE PROCEDURE testProcedure()
BEGIN
    DECLARE localVar INT; -- 声明局部变量
    SET localVar = 10; -- 使用SET给已声明的局部变量赋值
END //
DELIMITER ;
```

所以，在存储过程中处理局部变量时，不能跳过`DECLARE`声明步骤，直接用`SET`来声明并赋值。 */


/* 存储过程之变量相关内容
1. **局部变量概述**
局部变量是在存储过程中根据需要定义，仅在局部生效的变量。访问前需使用`DECLARE`声明，作用范围为声明它的`BEGIN... END`块。可作为存储过程内的局部变量和输入参数。
2. **声明语法**
`DECLARE 变量名 变量类型 [DEFAULT...]`，其中变量类型涵盖数据库常见字段类型，如`INT`、`BIGINT`、`CHAR`、`VARCHAR`、`DATE`、`TIME`等。
3. **赋值方法**
    - `SET 变量名 = 值`
    - `SET 变量名 := 值`
    - `SELECT 字段名 INTO 变量名 FROM 表名...` */


create procedure p2()
begin
    -- 声明
    declare stu_count int default 0;
    -- 赋值 方法一
    set stu_count := 100;
    -- 赋值 方法二
    select count(*) into stu_count from student;
    select stu_count = count(*) from student;

    select stu_count;
end;

call p2;

drop procedure p2;




-- IF
/*### 存储过程中的IF语句
`IF`语句是存储过程中用于实现条件判断的结构，根据不同的条件执行相应的代码块。以下是其语法结构及注释说明：
```sql
-- 开始IF条件判断
IF 条件1 THEN
    -- 当条件1满足时，执行这里的代码块
    ......
-- 可选的ELSEIF部分，用于添加额外的条件判断
ELSEIF 条件2 THEN
    -- 当条件2满足时，执行这里的代码块
    ......
-- 可选的ELSE部分，当以上条件都不满足时执行
ELSE
    -- 执行这里的代码块
    ......
END IF; -- 结束IF条件判断
``` */



-- 定义存储过程，完成如下需求
-- 根据定义的分数score变量，判定当前分数对应的分数等级。
-- 1.score >=85分，等级为优秀。
-- 2.score>=60分且score<85分，等级为及格。
-- 3.score<60分，等级为不及格。

create procedure p3()
begin
-- 根据定义的分数score变量，判定当前分数对应的分数等级。
    declare score int default 58;  -- deafult 后面不能跟查询到某一个结果
    declare result varchar(10);
-- 1.score >=85分，等级为优秀。
    if score >= 85 then
        set result := '优秀';
-- 2.score>=60分且score<85分，等级为及格。
    elseif score >= 60 then
        set result := '及格';
-- 3.score<60分，等级为不及格。
    else
        set result = '不及格';
    end if;

select result;

end;

call p3;



-- 参数
/*
这部分内容介绍了MySQL中存储过程的参数相关知识，具体整理如下：

### 一、存储过程参数类型
- **IN**：作为输入参数，在调用存储过程时需传入值，是默认参数类型。例如，调用存储过程获取某一指定ID的用户信息，该ID就可作为IN参数传入。
 - **OUT**：用作输出参数，可充当返回值。比如，存储过程统计某表中的记录数，用OUT参数返回统计结果。
 - **INOUT**：兼具输入和输出功能，既可以接收传入的值，也能将处理后的值返回。例如，在存储过程中对传入的数值进行计算，再将计算结果通过该参数返回。

### 二、存储过程参数用法
创建存储过程时定义参数的语法为：

CREATE PROCEDURE 存储过程名称([IN/OUT/INOUT 参数名 参数类型])
BEGIN
    -- SQL语句
END;
```
其中，在括号内根据需求定义不同类型的参数，多个参数之间用逗号分隔，然后在BEGIN和END之间编写实现具体业务逻辑的SQL语句。
*/


/*
1.根据传入参数score，判定当前分数对应的分数等级，并返回
score >= 85分，等级为优秀。
score >=60分且score<85分，等级为及格。
score<60分，等级为不及格。

2.将传入的 200分制的分数,进行换算,换算成百分制，然后返回,
*/



-- 根据传入(in)参数score，判定当前分数对应的分数等级，并返回(out)
create procedure p4(in score int ,out result varchar(10))
begin
-- 1.score >=85分，等级为优秀。
    if score >= 85 then
        set result := '优秀';
-- 2.score>=60分且score<85分，等级为及格。
    elseif score >= 60 then
        set result := '及格';
-- 3.score<60分，等级为不及格。
    else
        set result = '不及格';
    end if;
end;

-- 调用存储过程，类似于调用函数吧
call p4(68,@result);
-- 需要为输入参数赋值，同时也需要定义一个用户自定义变量来接受返回值，这里的存储过程不能当返回值用，与函数不同
select @result;


-- 2.将传入的 200分制的分数,进行换算,换算成百分制，然后返回,
-- 即使传入又是传出 用inout
create procedure p5(inout score double ,out result varchar(10))
begin
-- 1.score >=85分，等级为优秀。
    if score >= 85 then
        set result := '优秀';
-- 2.score>=60分且score<85分，等级为及格。
    elseif score >= 60 then
        set result := '及格';
-- 3.score<60分，等级为不及格。
    else
        set result = '不及格';
    end if;

set score := score/2;

end;

-- 调用存储过程，类似于调用函数吧

-- 先要传入200分制的分数，先赋值
set @score := 150;

call p5(@score,@result);

select @score,@result;





-- CASE
/*在MySQL存储过程中，`CASE`语句用于条件判断，有以下两种语法形式：
### 语法一（简单CASE语句）
```sql
CASE case_value
    WHEN when_value1 THEN statement_list1
    [WHEN when_value2 THEN statement_list2]...
    [ELSE statement_list]
END CASE;
```
 - `case_value`：是要进行比较的表达式。
 - `when_value`：是具体的比较值。当`case_value` 等于某个`when_value` 时，执行对应的`statement_list`（语句列表 ）。
 - `ELSE` 子句（可选）：当所有`WHEN`条件都不满足时执行。

### 语法二（搜索CASE语句）
```sql
CASE
    WHEN search_condition1 THEN statement_list1
    [WHEN search_condition2 THEN statement_list2]...
    [ELSE statement_list]
END CASE;
```
 - 直接使用`WHEN`后跟条件表达式`search_condition`。
 - 当某个`WHEN`后的条件表达式为真时，执行对应的`statement_list`（语句列表）。
 - `ELSE` 子句（可选）：当所有`WHEN`条件都不满足时执行 。 */


/*在数据库中，存储过程里的`CASE`语句和`CASE`函数既有相似之处，也存在一些区别：

### 相似点
- **功能目的**：二者都用于实现条件判断逻辑，根据不同的条件返回相应的结果，在处理数据、实现业务逻辑方面都能发挥条件分支判断的作用。
- **语法结构**：都包含`CASE`关键字，以及`WHEN`、`THEN`和可选的`ELSE`部分，基本的条件判断逻辑书写方式类似。例如简单形式都是通过比较值来确定返回结果，搜索形式都是依据条件表达式的真假来执行对应操作。

### 不同点
- **使用场景**
    - **`CASE`语句**：主要用于存储过程、函数、触发器等程序结构中，通常会作为一段可执行的代码块，用于控制程序流程，可以执行一系列的SQL语句或赋值操作等。比如在存储过程中根据不同条件更新多张表的数据。
    - **`CASE`函数**：一般用于`SELECT`语句、`WHERE`子句、`HAVING`子句等查询语句中，返回一个具体的值，以对查询结果进行处理或筛选。例如在查询结果中根据某列的值进行分类显示。
- **返回形式**
    - **`CASE`语句**：`END CASE` 之后没有返回值一说，它主要是通过执行内部的语句列表（`statement_list` ）来完成一系列操作，比如修改变量值、执行数据插入或更新等操作，而不是像函数那样直接返回一个供外部使用的结果。
    - **`CASE`函数**：最终会返回一个值，这个值可以是常量、表达式或字段值等，并且这个返回值可以参与到所在语句的运算或逻辑判断中，比如在`SELECT` 语句中作为一个新的列返回。
- **语法细节**
    - **`CASE`语句**：在存储过程的`CASE`语句中，`statement_list`可以包含多条SQL语句，并且需要使用`BEGIN...END` 块来包裹多条语句（如果有多条的话）。
    - **`CASE`函数**：在`CASE`函数中，`THEN`后面通常只跟一个单一的值或表达式，用于返回满足条件时的结果。 */


/*根据传入的月份，判定月份所属的季节(要求采用case结构)
1.1-3月份，为第一季度
2.4-6月份，为第二季度
3.7-9月份、为第三季度
10-12月份，为第四季度*/

create procedure p6(in month int )
begin
    declare season varchar(10);

    case
        when month >= 1 and month <= 3
            then set season := '第一季度';
        when month >= 4 and month <= 6
            then set season := '第二季度';
        when month >= 7 and month <= 9
            then set season := '第三季度';
        when month >= 10 and month <= 12
            then set season := '第四季度';
        else
            set season = '非法参数';
    end case;

    select concat('您输入的月份为：',month,'  所属的季度为: ',season);

end;

 call p6(15);





/*
while循环
while 循环是有条件的循环控制语句。满足条件后，再执行循环体中的SQL语句，具体语法为:

#先判定条件，如果条件为true，则执行逻辑，否则，不执行逻辑

WHILE 条件 DO
       SQL逻辑...
END WHILE;
  */


CREATE PROCEDURE p7(IN num INT, OUT result INT)
BEGIN
    SET result = 0;
    WHILE num >= 1 DO
        SET result := result + num;
        SET num := num - 1;
    END WHILE;
    -- 这里删除了 SELECT CONCAT('所求之和为:', result);
END ;

SET @result = 0;
CALL p7(100, @result);
SELECT @result;

DROP PROCEDURE IF EXISTS p7;




/*
repeat
repeat是有条件的循环控制语句,当满足条件的时候退出循环。具体语法为:
#先执行一次逻辑，然后判定逻辑是否满足，如果满足，则退出。如果不满足，则继续下一次循环
REPEAT
SQL逻辑..
UNTIL 条件
END REPEAT;
*/

create procedure p8(in num int , out sum int)
begin
    set sum = 0;
    repeat
        SET sum := sum + num;
        SET num := num - 1;
    until
        num < 1  -- 这里不加分隔号，也不加结束符，或者在前面先重新定义一下结束符，delimiter// 之类的
    end repeat;

    select concat('和为：',sum);

end;

set @sum := 0;
call p8(100,@sum);





/*loop
LOOP 实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其来实现简单的死循环。LOOP可以配合一下两个语句使用:
LEAVE:配合循环使用，退出循环，
ITERATE:必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环。
[begin label:] LOOp
SQL逻辑...
END LOOP fend label;
LEAVE label;--退出指定标记的循环体
ITERATE label;-- 直接进入下一次循环*/


-- 1.计算从 1 累加到 n 的值

-- 修改语句分隔符为//
DELIMITER //
-- 创建存储过程，in参数n为传入的数值，out参数sum_value用于返回累加结果
CREATE PROCEDURE sum_from_1_to_n(IN n INT, OUT sum_value INT)
BEGIN
    DECLARE num INT DEFAULT 1;  -- 初始化循环变量num为1
    SET sum_value = 0;  -- 初始化累加结果为0
    loop_label: LOOP  -- 定义循环标签loop_label
        SET sum_value := sum_value + num;  -- 将num累加到sum_value中
        SET num := num + 1;  -- num自增1
        -- 判断num是否大于n，大于则退出循环
        IF num > n THEN
            LEAVE loop_label;
        END IF;
    END LOOP loop_label;  -- 结束循环
END //
-- 恢复语句分隔符为;
DELIMITER ;

-- 调用示例
SET @sum_result = 0;
CALL sum_from_1_to_n(10, @sum_result);
SELECT @sum_result;


-- 2.计算从 1 到 n 之间偶数累加值

-- 修改语句分隔符为//
DELIMITER //
-- 创建存储过程，in参数n为传入的数值，out参数even_sum用于返回偶数累加结果
CREATE PROCEDURE sum_even_numbers(IN n INT, OUT even_sum INT)
BEGIN
    DECLARE num INT DEFAULT 1;  -- 初始化循环变量num为1
    SET even_sum = 0;  -- 初始化偶数累加结果为0
    loop_label: LOOP  -- 定义循环标签loop_label
        /*判断num是否为偶数
        IF num % 2 = 0 THEN
            SET even_sum := even_sum + num;  -- 是偶数则累加到even_sum中
        END IF;*/
        -- 判断num是否为奇数，如果是奇数则跳过本次循环
        IF num % 2 = 1 THEN
            ITERATE loop_label;
        END IF;
        SET even_sum := even_sum + num;  -- 是偶数则累加到even_sum中
        SET num := num + 1;  -- num自增1
        -- 判断num是否大于n，大于则退出循环
        IF num > n THEN
            LEAVE loop_label;
        END IF;
    END LOOP loop_label;  -- 结束循环
END //
-- 恢复语句分隔符为;
DELIMITER ;

-- 调用示例
SET @even_sum_result = 0;
CALL sum_even_numbers(10, @even_sum_result);
SELECT @even_sum_result;



/*
-- 游标
游标(CURSOR)是用来存储查询结果集的数据类型,在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标
的声明、OPEN、FETCH 和 CLOSE，其语法分别如下。

声明游标
DECLARE 游标名称 CURSOR FOR 查询语句

打开游标
OPEN 游标名称;

获取游标记录
FETCH 游标名称 INTO 变量1,变量2 ……

关闭游标
CLOSE 游标名称，*/


/*条件处理程序
条件处理程序(Handler)可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。具体语法为:
DECLARE handler action HANDLER FOR condition value , condition value.... statement;

handler_action
CONTINUE: 继续执行当前程序
EXIT:终止执行当前程序

condition_value
SOLSTATE sqlstate value:状态码，如 02000
SOLWARNING:所有以01开头的SQLSTATE代码的简写
NOT FOUND:所有以02开头的SOLSTATE代码的简写
SQLEXCEPTION:所有没有被SQLWARNING或 NOT FOUND捕获的SQLSTATE代码的简写 */



/*根据传入的参数uage，来查询用户表tb_user中，所有的用户年龄小于等于uage的用户姓名(name)和专业(profession)，并将用户的姓名和专业插入到所创建
  的一张新表(id,name,profession)中。  */


-- 创建目标新表
-- 创建目标新表，用于存储从原表中筛选出的符合条件的用户姓名和专业信息
-- new_tb_user 表包含三个字段：
-- id：自增的整数类型，作为表的主键，用于唯一标识每一条记录
-- name：长度为 255 的字符串类型，用于存储用户的姓名
-- profession：长度为 255 的字符串类型，用于存储用户的专业
CREATE TABLE new_tb_user (
    id INT AUTO_INCREMENT PRIMARY KEY comment '编号',
    name VARCHAR(255) comment '姓名',
    profession VARCHAR(255) comment '专业'
) comment '新学生表';

-- 将 MySQL 的语句分隔符临时修改为 //，因为存储过程内部包含多条语句，默认的分号（;）会导致存储过程在定义时被提前截断
delimiter //

-- 创建名为 insert_user_data 的存储过程，该存储过程接受一个输入参数 uage
-- uage 用于指定筛选用户的年龄条件，即年龄小于等于该值的用户将被筛选出来
create procedure insert_user_data(in uage int)
begin

    -- 先声明游标，再声明普通变量，必须的

    -- 声明一个布尔类型的变量 done，用于标记游标是否已经遍历到结果集的末尾
    -- 初始值设置为 FALSE，表示还没有遍历到末尾
        declare done boolean default false;

    -- 声明一个字符串类型的变量 user_name，用于存储从游标中获取的用户姓名
        declare user_name varchar(100);

    -- 声明一个字符串类型的变量 user_profession，用于存储从游标中获取的用户专业
        declare user_profession varchar(100);

    -- 声明一个游标 user_cursor，它关联的查询语句用于从 tb_user 表中筛选出年龄小于等于 uage 的用户的姓名和专业
    -- 后续将通过游标遍历这个查询结果集
        declare user_cursor cursor for
            select name , profession from tb_user where age <= uage;

    -- 定义一个处理程序，当游标遍历到结果集的末尾（触发 NOT FOUND 条件）时
    -- 该处理程序会执行 SET done = TRUE 语句，将 done 变量设置为 TRUE
    -- 以便在后续的循环中判断是否结束遍历
    -- 尽量这样设置结束标志，用continue
    -- exit会强制中断当前程序，包括存储过程，循环体等
        declare continue handler for not found set done = true;

    -- 打开游标，开始从关联的查询结果集中获取数据
        open user_cursor;

    -- 定义一个名为 user_loop 的循环标签，用于标识循环体，方便在循环内部使用 LEAVE 语句跳出循环
        user_loop:loop
        -- 使用 FETCH 语句从游标 user_cursor 中获取当前行的数据，并将其分别赋值给 user_name 和 user_profession 变量
            fetch user_cursor into user_name , user_profession;
        -- 判断 done 变量是否为 TRUE，如果为 TRUE，表示游标已经遍历到结果集的末尾
        -- 此时使用 LEAVE 语句跳出名为 user_loop 的循环
            if done = true then
                leave user_loop;
        end if;

        -- 将从游标中获取的用户姓名和专业数据插入到 new_tb_user 表中
        -- 插入的字段为 name 和 profession，对应的值分别为 user_name 和 user_profession 变量的值
            insert into new_tb_user (id,name,profession)
                VALUES(null,user_name,user_profession);
        end loop ;
    -- 关闭游标，释放游标占用的资源，结束对查询结果集的遍历
            close user_cursor;
end //

-- 将 MySQL 的语句分隔符恢复为默认的分号（;）
delimiter ;

-- 调用名为 insert_user_data 的存储过程，并传入参数 23
-- 表示筛选年龄小于等于 23 岁的用户，并将他们的姓名和专业插入到 new_tb_user 表中
call insert_user_data(30);

-- 可选的验证步骤，通过查询 new_tb_user 表的所有数据
-- 来检查存储过程是否正确执行，即是否成功插入了符合条件的用户数据
select * from new_tb_user;



-- https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html
-- MySQL官方文档
